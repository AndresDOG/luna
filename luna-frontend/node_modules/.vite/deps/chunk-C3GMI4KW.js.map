{
  "version": 3,
  "sources": ["../../vuetify/src/components/VSlideGroup/VSlideGroup.tsx", "../../vuetify/src/components/VSlideGroup/helpers.ts"],
  "sourcesContent": ["// Styles\nimport './VSlideGroup.sass'\n\n// Components\nimport { VFadeTransition } from '@/components/transitions'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { makeDisplayProps, useDisplay } from '@/composables/display'\nimport { useGoTo } from '@/composables/goto'\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { IconValue } from '@/composables/icons'\nimport { useRtl } from '@/composables/locale'\nimport { useResizeObserver } from '@/composables/resizeObserver'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { computed, shallowRef, watch } from 'vue'\nimport {\n  calculateCenteredTarget,\n  calculateUpdatedTarget,\n  getClientSize,\n  getOffsetSize,\n  getScrollPosition,\n  getScrollSize,\n} from './helpers'\nimport { focusableChildren, genericComponent, IN_BROWSER, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType } from 'vue'\nimport type { GoToOptions } from '@/composables/goto'\nimport type { GroupProvide } from '@/composables/group'\nimport type { GenericProps } from '@/util'\n\nexport const VSlideGroupSymbol: InjectionKey<GroupProvide> = Symbol.for('vuetify:v-slide-group')\n\ninterface SlideGroupSlot {\n  next: GroupProvide['next']\n  prev: GroupProvide['prev']\n  select: GroupProvide['select']\n  isSelected: GroupProvide['isSelected']\n}\n\ntype VSlideGroupSlots = {\n  default: SlideGroupSlot\n  prev: SlideGroupSlot\n  next: SlideGroupSlot\n}\n\nexport const makeVSlideGroupProps = propsFactory({\n  centerActive: Boolean,\n  direction: {\n    type: String as PropType<'horizontal' | 'vertical'>,\n    default: 'horizontal',\n  },\n  symbol: {\n    type: null,\n    default: VSlideGroupSymbol,\n  },\n  nextIcon: {\n    type: IconValue,\n    default: '$next',\n  },\n  prevIcon: {\n    type: IconValue,\n    default: '$prev',\n  },\n  showArrows: {\n    type: [Boolean, String],\n    validator: (v: any) => (\n      typeof v === 'boolean' || [\n        'always',\n        'desktop',\n        'mobile',\n      ].includes(v)\n    ),\n  },\n\n  ...makeComponentProps(),\n  ...makeDisplayProps(),\n  ...makeTagProps(),\n  ...makeGroupProps({\n    selectedClass: 'v-slide-group-item--active',\n  }),\n}, 'VSlideGroup')\n\nexport const VSlideGroup = genericComponent<new <T>(\n  props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (value: T) => void\n  },\n  slots: VSlideGroupSlots,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VSlideGroup',\n\n  props: makeVSlideGroupProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { isRtl } = useRtl()\n    const { displayClasses, mobile } = useDisplay(props)\n    const group = useGroup(props, props.symbol)\n    const isOverflowing = shallowRef(false)\n    const scrollOffset = shallowRef(0)\n    const containerSize = shallowRef(0)\n    const contentSize = shallowRef(0)\n    const isHorizontal = computed(() => props.direction === 'horizontal')\n\n    const { resizeRef: containerRef, contentRect: containerRect } = useResizeObserver()\n    const { resizeRef: contentRef, contentRect } = useResizeObserver()\n\n    const goTo = useGoTo()\n    const goToOptions = computed<Partial<GoToOptions>>(() => {\n      return {\n        container: containerRef.el,\n        duration: 200,\n        easing: 'easeOutQuart',\n      }\n    })\n\n    const firstSelectedIndex = computed(() => {\n      if (!group.selected.value.length) return -1\n\n      return group.items.value.findIndex(item => item.id === group.selected.value[0])\n    })\n\n    const lastSelectedIndex = computed(() => {\n      if (!group.selected.value.length) return -1\n\n      return group.items.value.findIndex(item => item.id === group.selected.value[group.selected.value.length - 1])\n    })\n\n    if (IN_BROWSER) {\n      let frame = -1\n      watch(() => [group.selected.value, containerRect.value, contentRect.value, isHorizontal.value], () => {\n        cancelAnimationFrame(frame)\n        frame = requestAnimationFrame(() => {\n          if (containerRect.value && contentRect.value) {\n            const sizeProperty = isHorizontal.value ? 'width' : 'height'\n\n            containerSize.value = containerRect.value[sizeProperty]\n            contentSize.value = contentRect.value[sizeProperty]\n\n            isOverflowing.value = containerSize.value + 1 < contentSize.value\n          }\n\n          if (firstSelectedIndex.value >= 0 && contentRef.el) {\n            // TODO: Is this too naive? Should we store element references in group composable?\n            const selectedElement = contentRef.el.children[lastSelectedIndex.value] as HTMLElement\n\n            scrollToChildren(selectedElement, props.centerActive)\n          }\n        })\n      })\n    }\n\n    const isFocused = shallowRef(false)\n\n    function scrollToChildren (children: HTMLElement, center?: boolean) {\n      let target = 0\n\n      if (center) {\n        target = calculateCenteredTarget({\n          containerElement: containerRef.el!,\n          isHorizontal: isHorizontal.value,\n          selectedElement: children,\n        })\n      } else {\n        target = calculateUpdatedTarget({\n          containerElement: containerRef.el!,\n          isHorizontal: isHorizontal.value,\n          isRtl: isRtl.value,\n          selectedElement: children,\n        })\n      }\n\n      scrollToPosition(target)\n    }\n\n    function scrollToPosition (newPosition: number) {\n      if (!IN_BROWSER || !containerRef.el) return\n\n      const offsetSize = getOffsetSize(isHorizontal.value, containerRef.el)\n      const scrollPosition = getScrollPosition(isHorizontal.value, isRtl.value, containerRef.el)\n      const scrollSize = getScrollSize(isHorizontal.value, containerRef.el)\n\n      if (\n        scrollSize <= offsetSize ||\n        // Prevent scrolling by only a couple of pixels, which doesn't look smooth\n        Math.abs(newPosition - scrollPosition) < 16\n      ) return\n\n      if (isHorizontal.value && isRtl.value && containerRef.el) {\n        const { scrollWidth, offsetWidth: containerWidth } = containerRef.el!\n\n        newPosition = (scrollWidth - containerWidth) - newPosition\n      }\n\n      if (isHorizontal.value) {\n        goTo.horizontal(newPosition, goToOptions.value)\n      } else {\n        goTo(newPosition, goToOptions.value)\n      }\n    }\n\n    function onScroll (e: Event) {\n      const { scrollTop, scrollLeft } = e.target as HTMLElement\n\n      scrollOffset.value = isHorizontal.value ? scrollLeft : scrollTop\n    }\n\n    function onFocusin (e: FocusEvent) {\n      isFocused.value = true\n\n      if (!isOverflowing.value || !contentRef.el) return\n\n      // Focused element is likely to be the root of an item, so a\n      // breadth-first search will probably find it in the first iteration\n      for (const el of e.composedPath()) {\n        for (const item of contentRef.el.children) {\n          if (item === el) {\n            scrollToChildren(item as HTMLElement)\n            return\n          }\n        }\n      }\n    }\n\n    function onFocusout (e: FocusEvent) {\n      isFocused.value = false\n    }\n\n    // Affix clicks produce onFocus that we have to ignore to avoid extra scrollToChildren\n    let ignoreFocusEvent = false\n    function onFocus (e: FocusEvent) {\n      if (\n        !ignoreFocusEvent &&\n        !isFocused.value &&\n        !(e.relatedTarget && contentRef.el?.contains(e.relatedTarget as Node))\n      ) focus()\n\n      ignoreFocusEvent = false\n    }\n\n    function onFocusAffixes () {\n      ignoreFocusEvent = true\n    }\n\n    function onKeydown (e: KeyboardEvent) {\n      if (!contentRef.el) return\n\n      function toFocus (location: Parameters<typeof focus>[0]) {\n        e.preventDefault()\n        focus(location)\n      }\n\n      if (isHorizontal.value) {\n        if (e.key === 'ArrowRight') {\n          toFocus(isRtl.value ? 'prev' : 'next')\n        } else if (e.key === 'ArrowLeft') {\n          toFocus(isRtl.value ? 'next' : 'prev')\n        }\n      } else {\n        if (e.key === 'ArrowDown') {\n          toFocus('next')\n        } else if (e.key === 'ArrowUp') {\n          toFocus('prev')\n        }\n      }\n\n      if (e.key === 'Home') {\n        toFocus('first')\n      } else if (e.key === 'End') {\n        toFocus('last')\n      }\n    }\n\n    function focus (location?: 'next' | 'prev' | 'first' | 'last') {\n      if (!contentRef.el) return\n\n      let el: HTMLElement | undefined\n\n      if (!location) {\n        const focusable = focusableChildren(contentRef.el)\n        el = focusable[0]\n      } else if (location === 'next') {\n        el = contentRef.el.querySelector(':focus')?.nextElementSibling as HTMLElement | undefined\n\n        if (!el) return focus('first')\n      } else if (location === 'prev') {\n        el = contentRef.el.querySelector(':focus')?.previousElementSibling as HTMLElement | undefined\n\n        if (!el) return focus('last')\n      } else if (location === 'first') {\n        el = (contentRef.el.firstElementChild as HTMLElement)\n      } else if (location === 'last') {\n        el = (contentRef.el.lastElementChild as HTMLElement)\n      }\n\n      if (el) {\n        el.focus({ preventScroll: true })\n      }\n    }\n\n    function scrollTo (location: 'prev' | 'next') {\n      const direction = isHorizontal.value && isRtl.value ? -1 : 1\n\n      const offsetStep = (location === 'prev' ? -direction : direction) * containerSize.value\n\n      let newPosition = scrollOffset.value + offsetStep\n\n      // TODO: improve it\n      if (isHorizontal.value && isRtl.value && containerRef.el) {\n        const { scrollWidth, offsetWidth: containerWidth } = containerRef.el!\n\n        newPosition += scrollWidth - containerWidth\n      }\n\n      scrollToPosition(newPosition)\n    }\n\n    const slotProps = computed(() => ({\n      next: group.next,\n      prev: group.prev,\n      select: group.select,\n      isSelected: group.isSelected,\n    }))\n\n    const hasAffixes = computed(() => {\n      switch (props.showArrows) {\n        // Always show arrows on desktop & mobile\n        case 'always': return true\n\n        // Always show arrows on desktop\n        case 'desktop': return !mobile.value\n\n        // Show arrows on mobile when overflowing.\n        // This matches the default 2.2 behavior\n        case true: return isOverflowing.value || Math.abs(scrollOffset.value) > 0\n\n        // Always show on mobile\n        case 'mobile': return (\n          mobile.value ||\n          (isOverflowing.value || Math.abs(scrollOffset.value) > 0)\n        )\n\n        // https://material.io/components/tabs#scrollable-tabs\n        // Always show arrows when\n        // overflowed on desktop\n        default: return (\n          !mobile.value &&\n          (isOverflowing.value || Math.abs(scrollOffset.value) > 0)\n        )\n      }\n    })\n\n    const hasPrev = computed(() => {\n      // 1 pixel in reserve, may be lost after rounding\n      return Math.abs(scrollOffset.value) > 1\n    })\n\n    const hasNext = computed(() => {\n      if (!containerRef.value) return false\n\n      const scrollSize = getScrollSize(isHorizontal.value, containerRef.el)\n      const clientSize = getClientSize(isHorizontal.value, containerRef.el)\n\n      const scrollSizeMax = scrollSize - clientSize\n\n      // 1 pixel in reserve, may be lost after rounding\n      return scrollSizeMax - Math.abs(scrollOffset.value) > 1\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-slide-group',\n          {\n            'v-slide-group--vertical': !isHorizontal.value,\n            'v-slide-group--has-affixes': hasAffixes.value,\n            'v-slide-group--is-overflowing': isOverflowing.value,\n          },\n          displayClasses.value,\n          props.class,\n        ]}\n        style={ props.style }\n        tabindex={ (isFocused.value || group.selected.value.length) ? -1 : 0 }\n        onFocus={ onFocus }\n      >\n        { hasAffixes.value && (\n          <div\n            key=\"prev\"\n            class={[\n              'v-slide-group__prev',\n              { 'v-slide-group__prev--disabled': !hasPrev.value },\n            ]}\n            onMousedown={ onFocusAffixes }\n            onClick={ () => hasPrev.value && scrollTo('prev') }\n          >\n            { slots.prev?.(slotProps.value) ?? (\n              <VFadeTransition>\n                <VIcon icon={ isRtl.value ? props.nextIcon : props.prevIcon }></VIcon>\n              </VFadeTransition>\n            )}\n          </div>\n        )}\n\n        <div\n          key=\"container\"\n          ref={ containerRef }\n          class=\"v-slide-group__container\"\n          onScroll={ onScroll }\n        >\n          <div\n            ref={ contentRef }\n            class=\"v-slide-group__content\"\n            onFocusin={ onFocusin }\n            onFocusout={ onFocusout }\n            onKeydown={ onKeydown }\n          >\n            { slots.default?.(slotProps.value) }\n          </div>\n        </div>\n\n        { hasAffixes.value && (\n          <div\n            key=\"next\"\n            class={[\n              'v-slide-group__next',\n              { 'v-slide-group__next--disabled': !hasNext.value },\n            ]}\n            onMousedown={ onFocusAffixes }\n            onClick={ () => hasNext.value && scrollTo('next') }\n          >\n            { slots.next?.(slotProps.value) ?? (\n              <VFadeTransition>\n                <VIcon icon={ isRtl.value ? props.prevIcon : props.nextIcon }></VIcon>\n              </VFadeTransition>\n            )}\n          </div>\n        )}\n      </props.tag>\n    ))\n\n    return {\n      selected: group.selected,\n      scrollTo,\n      scrollOffset,\n      focus,\n    }\n  },\n})\n\nexport type VSlideGroup = InstanceType<typeof VSlideGroup>\n", "export function calculateUpdatedTarget ({\n  selectedElement,\n  containerElement,\n  isRtl,\n  isHorizontal,\n}: {\n  selectedElement: HTMLElement\n  containerElement: HTMLElement\n  isRtl: boolean\n  isHorizontal: boolean\n}): number {\n  const containerSize = getOffsetSize(isHorizontal, containerElement)\n  const scrollPosition = getScrollPosition(isHorizontal, isRtl, containerElement)\n\n  const childrenSize = getOffsetSize(isHorizontal, selectedElement)\n  const childrenStartPosition = getOffsetPosition(isHorizontal, selectedElement)\n\n  const additionalOffset = childrenSize * 0.4\n\n  if (scrollPosition > childrenStartPosition) {\n    return childrenStartPosition - additionalOffset\n  } else if (scrollPosition + containerSize < childrenStartPosition + childrenSize) {\n    return childrenStartPosition - containerSize + childrenSize + additionalOffset\n  }\n\n  return scrollPosition\n}\n\nexport function calculateCenteredTarget ({\n  selectedElement,\n  containerElement,\n  isHorizontal,\n}: {\n  selectedElement: HTMLElement\n  containerElement: HTMLElement\n  isHorizontal: boolean\n}): number {\n  const containerOffsetSize = getOffsetSize(isHorizontal, containerElement)\n  const childrenOffsetPosition = getOffsetPosition(isHorizontal, selectedElement)\n  const childrenOffsetSize = getOffsetSize(isHorizontal, selectedElement)\n\n  return childrenOffsetPosition - (containerOffsetSize / 2) + (childrenOffsetSize / 2)\n}\n\nexport function getScrollSize (isHorizontal: boolean, element?: HTMLElement) {\n  const key = isHorizontal ? 'scrollWidth' : 'scrollHeight'\n  return element?.[key] || 0\n}\n\nexport function getClientSize (isHorizontal: boolean, element?: HTMLElement) {\n  const key = isHorizontal ? 'clientWidth' : 'clientHeight'\n  return element?.[key] || 0\n}\n\nexport function getScrollPosition (isHorizontal: boolean, rtl: boolean, element?: HTMLElement) {\n  if (!element) {\n    return 0\n  }\n\n  const {\n    scrollLeft,\n    offsetWidth,\n    scrollWidth,\n  } = element\n\n  if (isHorizontal) {\n    return rtl\n      ? scrollWidth - offsetWidth + scrollLeft\n      : scrollLeft\n  }\n\n  return element.scrollTop\n}\n\nexport function getOffsetSize (isHorizontal: boolean, element?: HTMLElement) {\n  const key = isHorizontal ? 'offsetWidth' : 'offsetHeight'\n  return element?.[key] || 0\n}\n\nexport function getOffsetPosition (isHorizontal: boolean, element?: HTMLElement) {\n  const key = isHorizontal ? 'offsetLeft' : 'offsetTop'\n  return element?.[key] || 0\n}\n"],
  "mappings": "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",
  "names": ["calculateUpdatedTarget", "_ref", "selectedElement", "containerElement", "isRtl", "isHorizontal", "containerSize", "getOffsetSize", "scrollPosition", "getScrollPosition", "childrenSize", "childrenStartPosition", "getOffsetPosition", "additionalOffset", "calculateCenteredTarget", "_ref2", "containerOffsetSize", "childrenOffsetPosition", "childrenOffsetSize", "getScrollSize", "element", "key", "getClientSize", "rtl", "scrollLeft", "offsetWidth", "scrollWidth", "scrollTop", "VSlideGroupSymbol", "Symbol", "for", "makeVSlideGroupProps", "propsFactory", "centerActive", "Boolean", "direction", "type", "String", "default", "symbol", "nextIcon", "IconValue", "prevIcon", "showArrows", "validator", "v", "includes", "makeComponentProps", "makeDisplayProps", "makeTagProps", "makeGroupProps", "selectedClass", "VSlideGroup", "genericComponent", "name", "props", "emits", "value", "setup", "_ref", "slots", "isRtl", "useRtl", "displayClasses", "mobile", "useDisplay", "group", "useGroup", "isOverflowing", "shallowRef", "scrollOffset", "containerSize", "contentSize", "isHorizontal", "computed", "resizeRef", "containerRef", "contentRect", "containerRect", "useResizeObserver", "contentRef", "goTo", "useGoTo", "goToOptions", "container", "el", "duration", "easing", "firstSelectedIndex", "selected", "length", "items", "findIndex", "item", "id", "lastSelectedIndex", "IN_BROWSER", "frame", "watch", "cancelAnimationFrame", "requestAnimationFrame", "sizeProperty", "selectedElement", "children", "scrollToChildren", "isFocused", "center", "target", "calculateCenteredTarget", "containerElement", "calculateUpdatedTarget", "scrollToPosition", "newPosition", "offsetSize", "getOffsetSize", "scrollPosition", "getScrollPosition", "scrollSize", "getScrollSize", "Math", "abs", "scrollWidth", "offsetWidth", "containerWidth", "horizontal", "onScroll", "e", "scrollTop", "scrollLeft", "onFocusin", "composedPath", "onFocusout", "ignoreFocusEvent", "onFocus", "relatedTarget", "contains", "focus", "onFocusAffixes", "onKeydown", "toFocus", "location", "preventDefault", "key", "focusable", "focusableChildren", "querySelector", "nextElementSibling", "previousElementSibling", "firstElementChild", "lastElementChild", "preventScroll", "scrollTo", "offsetStep", "slotProps", "next", "prev", "select", "isSelected", "hasAffixes", "hasPrev", "hasNext", "clientSize", "getClientSize", "scrollSizeMax", "useRender", "_createVNode", "tag", "class", "style", "onClick", "VFadeTransition", "VIcon"]
}
